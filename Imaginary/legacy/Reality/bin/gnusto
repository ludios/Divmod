#!/usr/bin/env python

# Twisted, the Framework of Your Internet
# Copyright (C) 2001 Matthew W. Lefkowitz
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


"""
Usage: gnusto mapName pickleName

Takes the Reality generated python source in a map ("mapName")
and generates a pickle ("pickleName") as well as a source representation
of it ("sourceName", which should be identical to the code in "mapName"
unless manual changes were made to the source).
"""

### Twisted Preamble
# This makes sure that users don't have to set up their environment
# specially in order to run these programs from bin/.
import sys,os,string

if string.find(os.path.abspath(sys.argv[0]),'Twisted') != -1:
    sys.path.append(os.path.dirname(
        os.path.dirname(os.path.abspath(sys.argv[0]))))
    sys.path.append('.')
### end of preamble

print "initializing...",
sys.stdout.flush()
from reality import thing
print "done."
mapName, pickleName = sys.argv[1:3]
print "loading %s..."%mapName,
sys.stdout.flush()
execfile(mapName)
print "done."
print "resolving %s..."%mapName,
sys.stdout.flush()
result.resolveAll()
print "done."
print "pickling to %s..." % pickleName,
sys.stdout.flush()
f = open(pickleName,'wb')
from cPickle import dump
# from pickle import dump
dump(result,f)
f.flush()
f.close()
del f
if len(sys.argv) > 2:
    mailname = sys.argv[3]
    from reality import mailsicle, popsicle
    ms = mailsicle.Mailsicle(mailname)
    for o in result.objects():
        popsicle.ref(o).acquireOID(ms)
        popsicle.dirty(o)
    popsicle.clean()
print "done."
